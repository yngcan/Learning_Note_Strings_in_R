## The versatile paste() function
# paste
PI = paste("The life of", pi)
PI

# paste
IloveR = paste("I", "love", "R", sep = "-")
IloveR

# paste with objects of different lengths
paste("X", 1:5, sep = ".")

# paste with collapsing
paste(1:3, c("!", "?", "+"), sep = "", collapse = "")

# paste without collapsing
paste(1:3, c("!", "?", "+"), sep = "")

# with missing values NA
evalue = paste("the value of 'e' is", exp(1), NA)

# collapsing with paste0
paste0("let's", "collapse", "all", "these", "words")

## 3.2 Printing characters

## 3.2.1 Printing values with print()

# text string
my_string = "programming with data is fun"

# print string
print(my_string)

# print without quotes
print(my_string, quote = FALSE)

## 3.2.2 Unquoted characters with noquote()
# noquote
noquote(my_string)

# class noquote
no_quotes = noquote(c("some", "quoted", "text", "!%^(&="))

# check class
class(no_quotes)

# test character
is.character(no_quotes)

# no quotes even when subscripting
no_quotes[2:3]

## 3.2.3 Concatenate and print with cat()

# simply print with 'cat()'
cat(my_string)

# concatenate and print
cat(my_string, "with R")

# especifying 'sep'
cat(my_string, "with R", sep = " =) ")

# another example
cat(1:10, sep = "-")

# first four months
cat(month.name[1:4], sep = " ")

# fill = 30
cat("Loooooooooong strings", "can be displayed", "in a nice format",
    "by using the 'fill' argument", fill = 30)

# cat with output in a given file
cat(my_string, "with R", file = "output.txt")

## 3.2.4 Encoding strings with format()

# default usage
format(13.7)

# another example
format(13.12345678)

# use of 'nsmall'
format(13.7, nsmall = 3)

# use of 'digits'
format(c(6, 13.1), digits = 2)
# digits The number of digits to the right of the decimal place.

# use of 'nsmall' and 'digits' 
format(c(6, 13.1), digits = 2, nsmall = 1)

# justify options
format(c("A", "BB", "CCC"), width = 5, justify = "centre")
format(c("A", "BB", "CCC"), width = 5, justify = "left")
format(c("A", "BB", "CCC"), width = 5, justify = "right")
format(c("A", "BB", "CCC"), width = 5, justify = "none")
# format() pads the strings with spaces so that they are all the same length.

# digits
format(1/1:5, digits = 2)

# use of 'digits', widths and justify
format(format(1/1:5, digits = 2), width = 6, justify = "c")

# big.mark
format(123456789, big.mark = ",")

# 3.2.5 C-style string formatting with sprintf()

# '%f' indicates 'fixed point' decimal notation
sprintf("%f", pi)
# decimal notation with 3 decimal digits
sprintf("%.3f", pi)
# 1 integer and 0 decimal digits
sprintf("%1.0f", pi)
# decimal notation with 3 decimal digits
sprintf("%5.1f", pi)
# print with sign (positive)
sprintf("%+f", pi)
# prefix a space
sprintf("% f", pi)
# left adjustment
sprintf("%-10f", pi) # left justified
# exponential decimal notation 'e'
sprintf("%e", pi)
# exponential decimal notation 'E'
sprintf("%E", pi)
# number of significant digits (6 by default)
sprintf("%g", pi)

## 3.2.6 Converting objects to strings with toString()
# default usage
toString(17.04)

# combining two objects
toString(c(17.04, 1978))

# combining several objects
toString(c("Bonjour", 123, TRUE, NA, log(exp(1))))

# use of 'width'
toString(c("one", "two", "3333333333"), width = 8)

## 3.3 Basic String Manipulations
## 3.3.1 Count number of characters with nchar()

# how many characters?
nchar(c("How", "many", "characters?"))

# how many characters?
nchar("How many characters?")

# how many elements?
length(c("How", "many", "characters?"))

# how many elements?
length("How many characters?")

## 3.3.2 Convert to lower case with tolower()
# to lower case
tolower(c("aLL ChaRacterS in LoweR caSe", "ABCDE"))

## 3.3.3 Convert to upper case with toupper()
# to upper case
toupper(c("All ChaRacterS in Upper Case", "abcde"))

## 3.3.4 Upper or lower case conversion with casefold()
# lower case folding
casefold("aLL ChaRacterS in LoweR caSe")
# upper case folding
casefold("All ChaRacterS in Upper Case", upper = TRUE)

## 3.3.5 Character translation with chartr()
# replace 'a' by 'A'
chartr("a", "A", "This is a boring string")

# incorrect use
chartr("ai", "X", "This is a bad example")

# multiple replacements
crazy = c("Here's to the crazy ones", "The misfits", "The rebels")
chartr("aei", "#!?", crazy)

## 3.3.6 Abbreviate strings with abbreviate()
# some color names
some_colors = colors()[1:4]
some_colors

# abbreviate (default usage)
colors1 = abbreviate(some_colors)
colors1

# abbreviate with 'minlength'
colors2 = abbreviate(some_colors, minlength = 5)
colors2

# abbreviate
colors3 = abbreviate(some_colors, minlength = 3, method = "both.sides")
colors3

## 3.3.7 Replace substrings with substr()
# extract 'bcd'
substr("abcdef", 2, 4)

# replace 2nd letter with hash symbol
x = c("may", "the", "force", "be", "with", "you")
substr(x, 2, 2) <- "#"

# replace 2nd and 3rd letters with happy face
y = c("may", "the", "force", "be", "with", "you")
substr(y, 2, 3) <- ":)"

# replacement with recycling
z = c("may", "the", "force", "be", "with", "you")
substr(z, 2, 3) <- c("#", "@")

## 3.3.8 Replace substrings with substring()
# same as 'substr'
substring("ABCDEF", 2, 4)
substr("ABCDEF", 2, 4)

# extract each letter
substring("ABCDEF", 1:6, 1:6)

# multiple replacement with recycling
text = c("more", "emotions", "are", "better", "than", "less")
substring(text, 1:3) <- c(" ", "zzz")

## 3.4 Set Operations
## 3.4.1 Set union with union()
# two character vectors
set1 = c("some", "random", "words", "some")
set2 = c("some", "many", "none", "few")
union(set1, set2)

# two character vectors
set3 = c("some", "random", "few", "words")
set4 = c("some", "many", "none", "few")
# intersect of set3 and set4
intersect(set3, set4)

# two character vectors
set5 = c("some", "random", "few", "words")
set6 = c("some", "many", "none", "few")
# difference between set5 and set6
setdiff(set5, set6)

## 3.4.4 Set equality with setequal()
# three character vectors
set7 = c("some", "random", "strings")
set8 = c("some", "many", "none", "few")
set9 = c("strings", "random", "some")
# set7 == set8?
setequal(set7, set8)
# set7 == set9?
setequal(set7, set9)

## 3.4.5 Exact equality with identical()
identical(set7, set7)
# set7 identical to set9?
identical(set7, set9)

## 3.4.6 Element contained with is.element()
# three vectors
set10 = c("some", "stuff", "to", "play", "with")
elem1 = "play"
elem2 = "crazy"

# elem1 in set10?
is.element(elem1, set10)

# elem2 in set10?
is.element(elem2, set10)

# elem1 in set10?
elem1 %in% set10

# elem2 in set10?
elem2 %in% set10

## 3.4.7 Sorting with sort()
set11 = c("today", "produced", "example", "beautiful", "a", "nicely")
# sort (decreasing order)
sort(set11)

# sort (increasing order)
sort(set11, decreasing = TRUE)

set12 = c("today", "produced", "example", "beautiful", "1", "nicely")
sort(set12)

## 3.4.8 Repetition with rep()
# repeat 'x' 4 times
paste(rep("x", 4), collapse = "")








